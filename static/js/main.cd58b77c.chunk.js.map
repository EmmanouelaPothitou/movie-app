{"version":3,"sources":["components/MovieList.js","components/SearchBox.js","components/MovieDetails.js","App.js","serviceWorker.js","index.js"],"names":["MovieList","movies","onSelect","Error","className","movieList","filter","movie","Poster","map","Col","xs","sm","md","lg","key","imdbID","onClick","Image","src","fluid","alt","Title","Year","Container","Row","SearchBox","onSearch","useState","query","setQuery","onSubmit","e","preventDefault","console","log","type","placeholder","name","value","onChange","target","MovieDetails","id","result","setResult","useEffect","a","url","URL","params","search","URLSearchParams","toString","fetch","res","json","data","getMovie","Genre","role","imdbRating","Actors","Director","Writer","Plot","totalSeasons","Runtime","Released","Awards","App","setMovies","selected","setSelected","searchMovies","Search","error","q","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cd58b77c.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Image from 'react-bootstrap/Image'\r\n\r\nfunction MovieList({ movies, onSelect }) {\r\n    if (movies.Error) {\r\n        return (<p className='error'>{movies.Error}</p>)\r\n    }\r\n    const movieList = movies.filter(movie => (movie.Poster && movie.Poster!==\"N/A\")).map(movie => {\r\n        return <Col xs={12} sm={4} md={3} lg={2} key={movie.imdbID} \r\n                onClick={() => onSelect(movie.imdbID)}>\r\n                <Image className=\"poster\" src={movie.Poster} fluid alt=\"Poster\" />\r\n                <div className=\"title-year\">\r\n                    <h3 className=\"title\">{movie.Title}</h3>\r\n                    <p className=\"year\" >Release Date: {movie.Year}</p>\r\n                </div>\r\n            </Col>\r\n    })\r\n\r\n    return (\r\n        <Container>\r\n            <Row>\r\n                {movieList}\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default MovieList;","import React from 'react';\r\nimport { useState } from 'react';\r\n\r\n\r\nfunction SearchBox({ onSearch }) {\r\n    const [query, setQuery] = useState('');\r\n\r\n    const handleSubmitButtonClick = (e) => {\r\n        e.preventDefault();\r\n        console.log(\"will call onSearch fn which we received from props\");\r\n        onSearch(query)\r\n        setQuery('');\r\n    }\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={handleSubmitButtonClick}>\r\n            <input className=\"input\"\r\n                type=\"text\"\r\n                placeholder=\"üìΩÔ∏è Search a Movie..\"\r\n                name=\"query\"\r\n                value={query}\r\n                onChange={(e) =>setQuery(e.target.value)}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport default SearchBox;\r\n","import React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Image from 'react-bootstrap/Image'\r\n\r\n\r\n\r\nfunction MovieDetails({ id }) {\r\n    console.log(\"movie details id is\", id)\r\n    const [result, setResult] = useState({});\r\n\r\n    useEffect(() => {\r\n        const getMovie = async () => {\r\n            const url = new URL(`http://www.omdbapi.com/`)\r\n            const params = {\r\n                \"apikey\": \"a20a37c4\",\r\n                \"i\": id,\r\n                \"plot\": \"full\"\r\n            }\r\n            url.search = new URLSearchParams(params).toString()\r\n\r\n            try {\r\n                const res = await fetch(url);\r\n                const data = await res.json();\r\n                console.log(data);\r\n                setResult(data);\r\n\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n        getMovie();\r\n    }, [id])\r\n\r\n\r\n    return (\r\n        <Container className='MovieDetails'>\r\n            <Row>\r\n                <Col >\r\n                    <Image className='posterDetails' src={result.Poster} alt=\"poster\" />\r\n                </Col>\r\n                <Col className='details'>\r\n                    <h3 className='titleDetails'>{result.Title}</h3>\r\n                    <p className='genre'><strong>{result.Genre}</strong></p>\r\n                    <p><strong>IMDB Rating: </strong><span role='img'>‚≠ê</span>{result.imdbRating}/10</p>\r\n                    <p className='actors'><strong>Actors: </strong>{result.Actors}</p>\r\n                    <p><strong>Director: </strong>{result.Director}, <strong>Writer: </strong>{result.Writer}</p>\r\n                    <p>{result.Plot}</p>\r\n                    {result.totalSeasons? <p className='seasons'><strong>Seasons: </strong>{result.totalSeasons}</p>: null}\r\n                    {result.totalSeasons ?\r\n                    <p className='duration'><strong>Duration: </strong>{result.Runtime}/episode</p>:\r\n                    <p className='duration'><strong>Duration: </strong>{result.Runtime}</p>}\r\n                    <p className='release'><strong>Release Date: </strong>{result.Released}</p>\r\n                    <p>{result.Awards}</p>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default MovieDetails;","import React from 'react';\nimport { useState } from 'react';\nimport './App.css';\nimport MovieList from './components/MovieList';\nimport SearchBox from './components/SearchBox.js';\nimport MovieDetails from './components/MovieDetails.js';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [selected, setSelected] = useState();\n\n  const searchMovies = async (query) => {\n    console.log(\"will search for\", query)\n    const url = new URL(`http://www.omdbapi.com/`)\n    const params = {\n      \"apikey\": \"a20a37c4\",\n      \"s\": query,\n      \"plot\": \"full\"\n    }\n    url.search = new URLSearchParams(params).toString()\n    try {\n      const res = await fetch(url);\n      const data = await res.json();\n      console.log(data);\n      (data.Search) ? setMovies(data.Search): setMovies(data);\n      setSelected(null);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <SearchBox onSearch={(q) => searchMovies(q)} />\n\n      <div>\n        {selected && <MovieDetails id={selected} />}\n        {<MovieList movies={movies} onSelect={(id) => setSelected(id)} />}\n\n      </div>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}